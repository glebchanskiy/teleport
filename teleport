#!/bin/bash

set -euo pipefail

CONFIG_FILE="$HOME/.teleport_hosts"

usage() {
  echo "Usage: teleport <source_directory> to <destination> in <remote_directory>"
  exit 1
}

error() {
  echo "Error: $1"
  exit 1
}

check_rsync() {
  if ! command -v rsync &> /dev/null; then
    error "rsync could not be found. Please install rsync to use this script."
  fi
}

validate_input() {
  if [[ "$#" -ne 5 ]]; then
    usage
  fi

  if [[ ! -e "$1" ]]; then
    error "Source directory '$1' does not exist."
  fi

  if [[ "$2" != "to" ]]; then
    error "Syntax error. Missing 'to'."
  fi

  if [[ "$4" != "in" ]]; then
    error "Syntax error. Missing 'in'."
  fi
}

resolve_alias() {
  local alias="$1"
  
  if [[ -f "$CONFIG_FILE" ]]; then
    local resolved_host
    resolved_host=$(grep -E "^$alias=" "$CONFIG_FILE" | cut -d'=' -f2)
    
    if [[ -n "$resolved_host" ]]; then
      echo "$resolved_host"
    else
      echo "$alias"
    fi
  else
    echo "$alias"
  fi
}

transfer_files() {
  local source_dir="$1"
  local destination="$2"
  local remote_dir="$3"
  local remote_server_port="$4"
  
  echo "Transferring '$source_dir' to '$destination'..."
  
  rsync -avz -e "ssh -p ${remote_server_port}" --progress "$source_dir" "$destination:${remote_dir}"
  
  if [[ $? -eq 0 ]]; then
    echo "Transfer completed successfully!"
  else
    error "File transfer failed."
  fi
}

# Function for bash completion
# teleport_bash_completion() {
#   cat <<-'EOF'
# _teleport_autocomplete() {
#     local cur prev teleport_aliases
#     cur="${COMP_WORDS[COMP_CWORD]}"
#     prev="${COMP_WORDS[COMP_CWORD-1]}"
#     CONFIG_FILE="$HOME/.teleport_hosts"

#     if [[ "$prev" == "to" ]]; then
#         if [[ -f "$CONFIG_FILE" ]]; then
#             teleport_aliases=$(grep -E '^[^#]+' "$CONFIG_FILE" | cut -d'=' -f1)
#         fi
#         COMPREPLY=( $(compgen -W "$teleport_aliases" -- "$cur") )
#     else
#         COMPREPLY=( $(compgen -f -- "$cur") )
#     fi
# }

# complete -F _teleport_autocomplete teleport
# EOF
# }

teleport_zsh_completion() {
  cat <<-'EOF'
ping_server() {
  ping -c1 -W1 -q "$1" > /dev/null 2>&1 && echo 'up' || echo 'down'
}

_teleport_autocomplete() {
    local cur prev teleport_aliases
    cur="${words[CURRENT]}"
    prev="${words[CURRENT-1]}"
    prevprev="${words[CURRENT-2]}"
    CONFIG_FILE="$HOME/.teleport_hosts"

    if [[ "$prev" == "in" ]]; then
        if [[ -f "$CONFIG_FILE" ]]; then
          local resolved_host
          resolved_host=$(grep -E "^$prevprev=" "$CONFIG_FILE" | cut -d'=' -f2)
          
          if [[ -n "$resolved_host" ]]; then
            remote_server="$resolved_host"
          else
            remote_server="$prevprev"
          fi
        else
          remote_server="$prevprev"
        fi

        remote_server=$(echo "$remote_server" | awk -F ":" '{print $1}')

        remote_path=${cur%/*}

        # server_open=$(ping_server $(echo "$remote_server" | awk -F "@" '{print $2}'))
        ip_address=$(echo "$remote_server" | awk -F "@" '{print $2}')
        server_open=$(ping_server "$ip_address")

        if [[ "$server_open" == "up" ]]; then
          remote_dirs=$(ssh -o ConnectTimeout=1 "$remote_server" "find '$remote_path' -maxdepth 1 -type d 2>/dev/null" && printf '\0')
          remote_dirs_array=("${(@f)remote_dirs}")

          if [[ "$remote_path" == "/" || "$remote_path" == "" ]]; then
            remote_dirs_array+=("/home")
          fi
          compadd -S "/" -- "${remote_dirs_array[@]}"
        else
          compadd "${remote_server} host is down"
        fi
    elif [[ "$prev" == "to" ]]; then
        if [[ -f "$CONFIG_FILE" ]]; then
            teleport_aliases=($(grep -E '^[^#]+' "$CONFIG_FILE" | cut -d'=' -f1))
        fi
        teleport_aliases+=("${USER}@")
        teleport_aliases+=("root@")
        compadd "${teleport_aliases[@]}"
    elif [[ "$prevprev" == "teleport" ]]; then
        compadd "to"
    elif [[ "$prevprev" == "to" ]]; then
        compadd "in"
    else
        _files
    fi
}

compdef _teleport_autocomplete teleport
EOF
}

main() {
  if [[ "$#" -ge 2 && "$1" == "completion" ]]; then
    case "$2" in
      zsh)
        teleport_zsh_completion
        exit 0
        ;;
      *)
        echo "Unsupported shell. Use 'bash' or 'zsh'."
        exit 1
        ;;
    esac
  fi

  check_rsync
  validate_input "$@"
  source_dir_or_file=$1
  destination_and_port="$(resolve_alias "$3")"
  destination=$(echo "$destination_and_port" | awk -F ":" '{print $1}')
  remote_dir=$5
  remote_server_port=$(echo "$destination_and_port" | awk -F ":" '{print $2}')

  if [[ ! "$destination" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+$ ]]; then
    error "Invalid destination format. Expected format: user@host:path or host:path. Received: ${destination}:${path}"
  fi

  transfer_files "$source_dir_or_file" "$destination" "$remote_dir" "$remote_server_port"
}

main "$@"

